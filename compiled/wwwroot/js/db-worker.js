async function GetMonstersFromAPI(){const e=await fetch("https://www.dnd5eapi.co/api/monsters",{method:"GET",headers:new Headers({Accept:"application/json"})});let t=[];if(e.ok){const n=await e.json();t=(null==n?void 0:n.results)||[]}return t}function GetMonsterDataFromAPI(e){return new Promise((t=>{const n=[];let s=0;for(let a=0;a<e.length;a++)fetch("https://www.dnd5eapi.co/"+e[a].url.replace(/^(\/)/,"")).then((e=>e.json())).then((e=>{const t=[],a=[];for(let n=0;n<e.actions.length;n++)t.push({Name:e.actions[n].name,Description:e.actions[n].desc});for(let t=0;t<e.special_abilities.length;t++)a.push({Name:e.special_abilities[t].name,Description:e.special_abilities[t].desc});const r={name:e.name.toLowerCase(),ac:e.armor_class,hp:e.hit_points,str:e.strength,int:e.intelligence,wis:e.wisdom,cha:e.charisma,dex:e.dexterity,con:e.constitution,actions:JSON.stringify(t),abilities:JSON.stringify(a)};n.push(r),s++})).catch((()=>{s++})).finally((()=>{s===e.length&&t(n)}))}))}function PutCreaturesInLocalDB(e){return new Promise((n=>{let s=0;const a=t.transaction("creatures","readwrite").objectStore("creatures");for(let t=0;t<e.length;t++){const r=a.put(e[t]);r.onsuccess=()=>{s++,s===e.length&&n()},r.onerror=t=>{s++,s===e.length&&n()}}}))}async function SyncMonstersWithAPI(){let e=await GetMonstersFromAPI();e=await GetMonsterDataFromAPI(e),await PutCreaturesInLocalDB(e)}function LookupCreatureInDB(e){return new Promise((n=>{let s={};const a=undefined,r=t.transaction("creatures","readonly").objectStore("creatures").get(e);r.onsuccess=()=>{s=r.result,n(s)},r.onerror=()=>{n(s)}}))}function GetAllCreatures(){return new Promise((e=>{const n=[],s=undefined,a=t.transaction("creatures","readonly").objectStore("creatures").getAll();a.onsuccess=()=>{const t=a.result;for(let e=0;e<t.length;e++)n.push(t[e].name);e(n)},a.onerror=()=>{e(n)}}))}const e=indexedDB.open("monsters",1);let t=null;e.onupgradeneeded=e=>{t=e.target.result;var n=t.createObjectStore("creatures",{keyPath:"name"});n.createIndex("name","name",{unique:!0}),n.createIndex("hp","hp",{unique:!1}),n.createIndex("ac","ac",{unique:!1}),n.createIndex("str","str",{unique:!1}),n.createIndex("int","int",{unique:!1}),n.createIndex("wis","wis",{unique:!1}),n.createIndex("cha","cha",{unique:!1}),n.createIndex("dex","dex",{unique:!1}),n.createIndex("con","con",{unique:!1}),n.createIndex("actions","actions",{unique:!1}),n.createIndex("abilities","abilities",{unique:!1})},e.onsuccess=e=>{t=e.target.result,SyncMonstersWithAPI()},self.onmessage=e=>{const t=e.data;switch(t.type){case"lookup":LookupCreatureInDB(t.query).then((e=>{const n={BaseHP:e.hp,BaseAC:e.ac,BaseName:e.name,HP:e.hp,AC:e.ac,Strength:e.str,Dexterity:e.dex,Intelligence:e.int,Constitution:e.con,Wisdom:e.wis,Charisma:e.cha,ActionsString:e.actions,AbilitiesString:e.abilities};self.postMessage({creature:n,messageUid:t.messageUid})}));break;case"add":const e=JSON.parse(t.creature),n=undefined;PutCreaturesInLocalDB([{name:e.BaseName.trim().toLowerCase(),ac:e.BaseAC,hp:e.BaseHP,str:null,int:null,wis:null,cha:null,dex:null,con:null,actions:null,abilities:null}]);break;case"get":GetAllCreatures().then((e=>{self.postMessage({creatures:e,messageUid:t.messageUid})}));break;default:break}};